<?xml version="1.0" encoding="UTF-8"?>
<!-- scan: 设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
　　　scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
　　　debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 子节点1：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。 -->
	<property name="Local_Home" value="E:/mmall_propertis" />
	<property name="LOG_PATH" value="${Local_Home}/logs" />
    <property name="LOG_ARCHIVE" value="${LOG_PATH}/archive" />
    <timestamp key="timestamp-by-second" datePattern="yyyyMMdd'T'HHmmss"/><!-- 将当前的时间转化为字符串模式 -->
	<!-- 子节点2：用来设置上下文名称，用于区分不同应用程序的记录。每个logger都关联到logger上下文，默认上下文名称为default。一旦设置，不能修改。 -->
	<!-- <contextName>${APP_Name}</contextName>  -->
	<!-- 子节点3：获取时间戳字符串，他有两个属性key和datePattern。key: 标识此<timestamp> 的名字；datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式。 -->	
	<!-- <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/> -->
	<!--  --><!--  --><!--  --><!--  -->
	
	<!-- ConsoleAppender：把日志输出到控制台 -->	
	<appender name="Console-Appender" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern> 
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>ERROR</level>
		</filter>
	</appender>
	<!-- FileAppender：把日志保存到本地路径下 -->
	<appender name="File-Appender" class="ch.qos.logback.core.FileAppender">
        <file>${LOG_PATH}/logfile-${timestamp-by-second}.log</file><!-- 保存位置以及log文件名 -->
        <encoder>
            <pattern>%date %level [%thread] %logger{36} [%file : %line] %msg%n </pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}.%d{yyyy-MM-dd}.zip</fileNamePattern>
        </rollingPolicy>
    </appender>
    <appender name="RollingFile-Appender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/rollingfile.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_ARCHIVE}/rollingfile.log%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>1KB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%date %level [%thread] %logger{36} [%file : %line] %msg%n </pattern>
        </encoder>
    </appender>
    <appender name ="Async-Appender" class= "ch.qos.logback.classic.AsyncAppender">  
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
        <discardingThreshold >0</discardingThreshold>  
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
        <queueSize>512</queueSize>  
        <!-- 添加附加的appender,最多只能添加一个 -->  
        <appender-ref ref ="RollingFile-Appender"/>  
    </appender> 
	<!-- 文件将打印在控制台、保存到本地 -->
    <logger name="guru.springframework.blog.logbackxml"  level="info" additivity="false">
        <appender-ref ref="Console-Appender" />
        <appender-ref ref="File-Appender" />
        <appender-ref ref="Async-Appender" />
    </logger>
    <logger name="jdbc.sqltiming" level="DEBUG"/>
    <logger name="com.ibatis" level="DEBUG" />
    <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG" />
    <logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG" />
    <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG" />
    <logger name="java.sql.Connection" level="DEBUG" />
    <logger name="java.sql.Statement" level="DEBUG" />
    <logger name="java.sql.PreparedStatement" level="DEBUG" />
    <!-- root表示是根节点，打印级别是debug，打印到控制台 -->
    <root level="DEGUG">
        <appender-ref ref="Console-Appender" />
    </root>
</configuration>